#!/usr/bin/env python3
from __future__ import annotations

import os
import json
import glob
import argparse
from typing import Dict, List

from praatio import textgrid as tg
from praatio.data_classes.textgrid import Textgrid
from praatio.utilities.constants import Interval
from praatio.data_classes.interval_tier import IntervalTier

class AeneasIntervaltier(IntervalTier):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
    
    @staticmethod
    def ensure_entrylist_validity(entryList: List[Interval]) -> List[Interval]:
        entryList.sort()

        validated_entryList = []
        for i, entry in enumerate(entryList):
            start = entry.start
            end = entry.end
        
            try:
                previous = validated_entryList[i-1]
            except IndexError:
                previous = None
            
            if previous is not None and previous.start >= start:
                start = previous.start + 0.00001
            if start >= end:
                end = start + 0.00001
            
            validated_entryList.append(Interval(start=start, end=end, label=entry.label))
        
        return validated_entryList
    
    @classmethod
    def from_json(cls, allignments: Dict, name: str) -> AeneasIntervaltier:
        entryList = []
        for fragment in allignments["fragments"]:
            entry = Interval(
                start=float(fragment["begin"]),
                end=float(fragment["end"]),                    
                label=" ".join(fragment["lines"])
            )
            entryList.append(entry)
        
        validated_entryList = cls.ensure_entrylist_validity(entryList)

        return cls(name=name, entryList=validated_entryList)

def parse_arguments() -> argparse.Namespace: 
    parser = argparse.ArgumentParser(description = "Processes tokens and phrases .json files generated by aeneas a .TextGrid")
    parser.add_argument("-d", "--directory", nargs='?', default="output", help = "The directory the tokens and phases is expected in, and the output is saved to")
    return parser.parse_args()

def aeneas_tier_from_file(filename: str, name: str) -> AeneasIntervaltier:
    with open(filename, "r") as file:
        allignment_dict = json.load(file)
    return AeneasIntervaltier.from_json(allignment_dict, name)

def main(): 
    args: argparse.Namespace = parse_arguments()

    word_allignments = glob.glob(f"./{args.directory}/*.tokens.json")
    phrase_allignments = glob.glob(f"./{args.directory}/*.phrases.json")

    for words, phrases in zip(word_allignments, phrase_allignments):
        words_tier = aeneas_tier_from_file(words, "Words")       
        phrases_tier = aeneas_tier_from_file(phrases, "Phrases")

        allignment_grid = Textgrid()
        allignment_grid.addTier(words_tier)
        allignment_grid.addTier(phrases_tier)
        name = words.replace(".tokens.json", ".allignment.TextGrid")
        allignment_grid.save(name, format="long_textgrid", includeBlankSpaces=True)

        os.remove(words)
        os.remove(phrases)

if __name__ == "__main__":
    main()
