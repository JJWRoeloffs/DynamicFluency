#!/usr/bin/env python3
from __future__ import annotations

import glob
import argparse
from typing import Set

import nltk
from praatio import textgrid as tg
from praatio.data_classes.textgrid import Textgrid
from praatio.data_classes.textgrid_tier import TextgridTier

from helpers import set_label, entrylist_labels_to_string

nltk.download('punkt')

def parse_arguments() -> argparse.Namespace: 
    parser = argparse.ArgumentParser(description = "Processes alligned pos_tags .TextGrid files generated by pos_tagging.py to a .TextGrid with reptition information in it.")
    parser.add_argument("-d", "--directory", nargs='?', default="output", help = "The directory the pos_tags .TextGrid is expected in, and the output is saved to")
    parser.add_argument("-m", "--max_read", nargs='?', default=300, type=int, help = "The maximum amount of words the detector reads back to check for repetitions")
    parser.add_argument("-i", "--to_ignore", nargs='?', help = "The words to ignore and not assign any value, seperated by commas.")

    args: argparse.Namespace = parser.parse_args()
    if args.to_ignore:
        args.to_ignore = set(args.to_ignore.split(","))
    else:
        args.to_ignore = set()
    return args

def make_repetitions_tier(
        pos_tier: TextgridTier, 
        *,
        max_cache: int = 100,
        to_ignore: Set = set(),
        name: str = "Repetitions"
    ) -> TextgridTier:

    cache = []
    repetitions_list = []

    for entry in pos_tier.entryList:
        if (not entry.label) or (entry.label in to_ignore):
            repetitions_list.append(entry)
            continue

        cache.insert(0, entry.label)
        if len(cache) > max_cache: 
            cache.pop()
        
        try:
            repetitions = str(1/cache.index(entry.label, 1))
        except ValueError:
            repetitions = "0"
    
        repetitions_list.append(set_label(entry, repetitions))

    return pos_tier.new(name=name, entryList=repetitions_list)

def make_freqdist_tier(
        pos_tier: TextgridTier, 
        *,
        to_ignore: Set = set(),
        name: str = "FreqDist"
    ) -> TextgridTier:

    text = entrylist_labels_to_string(pos_tier.entryList)
    fdist=nltk.FreqDist(nltk.word_tokenize(text))
    freqdist_list = []

    for entry in pos_tier.entryList:
        if (not entry.label) or (entry.label in to_ignore):
            freqdist_list.append(entry)
            continue

        frequency = str(fdist.freq(entry.label))
        freqdist_list.append(set_label(entry, frequency))
    
    return pos_tier.new(name=name, entryList=freqdist_list)

def main(): 
    args: argparse.Namespace = parse_arguments()

    tagged_files = glob.glob(f"./{args.directory}/*.pos_tags.TextGrid")
    for file in tagged_files:
        tagged_grid = tg.openTextgrid(file, includeEmptyIntervals=True)

        repetition_tier = make_repetitions_tier(
            pos_tier = tagged_grid.tierDict["POStags"],
            max_cache = args.max_read,
            to_ignore = args.to_ignore
        )
        freqdist_tier = make_freqdist_tier(
            pos_tier = tagged_grid.tierDict["POStags"],
            to_ignore = args.to_ignore
        )

        repetition_grid = Textgrid()
        repetition_grid.addTier(repetition_tier)
        repetition_grid.addTier(freqdist_tier)

        name = file.replace(".pos_tags.TextGrid", ".repetitions.TextGrid")
        repetition_grid.save(name, format="long_textgrid", includeBlankSpaces=True)

if __name__ == "__main__":
    main()
